name: Release Charts

on:
  push:
    branches:
      - main

jobs:
  release:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Add Kubeconfig
        run: |
          mkdir /home/runner/.kube
          touch /home/runner/.kube/config
          echo "${{ secrets.KUBECONFIG }}" > /home/runner/.kube/config
      
      - name: Create Docker Registry Secret
        run: |
          kubectl get secret ${{ secrets.SECRET_NAME }}

          if [ $? -eq 0 ]; then
            echo "Secret ${{ secrets.SECRET_NAME }} already exists."
            echo "No action needed"
          else
            echo "Secret ${{ secrets.SECRET_NAME }} does not exist."
            echo "Creating secret ${{ secrets.SECRET_NAME }}."
            
            echo ${{ secrets.DOCKERHUB_CLUSTER_SECRET }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            kubectl create secret generic ${{ secrets.SECRET_NAME }} \
            --from-file=.dockerconfigjson=/home/runner/.docker/config.json \
            --type=kubernetes.io/dockerconfigjson
          fi

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Package Chart
        id: package-chart
        run: |
          echo "[INFO] Packaging Helm Chart"
          echo $(pwd)
          echo $(ls -l)
          OUTPUT=$(helm package .)
          echo $OUTPUT

          echo "[INFO] Extracting version from Helm Chart package output."
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          echo $REPO_NAME

          result=$(echo $OUTPUT | grep -b -o "plant-coach-be-" )
          echo "result: $result"
          delimiter=":"
          index="${result%%$delimiter*}"
          echo "index: $index"
          VERSION=${OUTPUT:$index}
          echo "Extracted version: $VERSION"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Prepare to Push
        id: prepare-push
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          VERSION="${{ steps.package-chart.outputs.version }}"

          echo "[INFO] Preparing Helm"
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
          helm init --client-only

          echo "[INFO] Preparing the Cloudsmith CLI"
          pip install --user cloudsmith-cli
          
          echo "[INFO] Pushing Helm Package ${{ steps.package-chart.outputs.version }} to Cloudsmith."
          cloudsmith push helm plant-coach/$REPO_NAME /home/runner/work/$REPO_NAME/$REPO_NAME/$VERSION --republish -k ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Save Helm Chart to GitHub Secrets
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          REPO_NAME=${GITHUB_REPOSITORY##*/}
          PACKAGE_URI="https://dl.cloudsmith.io/basic/$GITHUB_REPOSITORY/helm/charts/${{ steps.package-chart.outputs.version }}"
          echo "[INFO] Setting the GitHub Org secret to the latest Helm Chart package: $PACKAGE_URI"
          gh secret set HELM_CHART --org Plant-Coach --visibility all --body "$PACKAGE_URI"
          
          echo "[INFO] Done!"